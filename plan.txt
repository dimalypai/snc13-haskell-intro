0. Introduction
  a. About me
  b. What we will do
  c. Haskell
    * Purely functional (referential transparency)
    * Strong static typing
    * Non-strict semantics (lazy evaluation)
1. Start with data types
  a. :i Bool
  b. Create language expressions (Expr.hs)
2. Load Expr to ghci
  a. ghci Expr.hs
  b. :l Expr.hs
3. Small functions examples in ghci
  a. :t id
  b. let definition
  c. Currying and partial application
  d. Value constructors from Expr.hs
4. Create Interpreter.hs
  a. Touch modules and std lib (Data.Map)
  b. Type synonyms
    * :i String
    * Env
  c. Newtype (wrapping for type safety)
5. Interpreter skeleton
  a. import Expr (add module Expr, more on modules)
  b. Functions (eval)
  c. Type signatures
  d. Undefined
6. Eval function
  a. Pattern matching
    lookupVar = undefined
  b. let
  c. where (hoogle Data.Map.insert)
  d. case
  e. Maybe (:i)
  f. Show hlint (lookupVar)
7. import Parser
8. Show and type classes (parse expressions)
  a. Deriving
  b. Instance (show comments in Haskell by commenting out deriving)
  c. Word about polymorphism (parametric, ad-hoc)
9. scl function, Main, binary
10. Laziness with infinite string example (evaluate infinite string constructed with repeat)
